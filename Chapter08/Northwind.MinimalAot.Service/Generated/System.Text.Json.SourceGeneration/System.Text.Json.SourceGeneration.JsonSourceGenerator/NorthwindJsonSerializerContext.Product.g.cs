// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Northwind.Serialization
{
    internal partial class NorthwindJsonSerializerContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Northwind.MinimalAot.Service.Product>? _Product;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Northwind.MinimalAot.Service.Product> Product
        {
            get => _Product ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Northwind.MinimalAot.Service.Product>)Options.GetTypeInfo(typeof(global::Northwind.MinimalAot.Service.Product));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Northwind.MinimalAot.Service.Product> Create_Product(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::Northwind.MinimalAot.Service.Product>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Northwind.MinimalAot.Service.Product> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::Northwind.MinimalAot.Service.Product>
                {
                    ObjectCreator = () => new global::Northwind.MinimalAot.Service.Product(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => ProductPropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    SerializeHandler = ProductSerializeHandler
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::Northwind.MinimalAot.Service.Product>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] ProductPropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[3];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Northwind.MinimalAot.Service.Product),
                Converter = null,
                Getter = static obj => ((global::Northwind.MinimalAot.Service.Product)obj).ProductId,
                Setter = static (obj, value) => ((global::Northwind.MinimalAot.Service.Product)obj).ProductId = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "ProductId",
                JsonPropertyName = null
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Northwind.MinimalAot.Service.Product),
                Converter = null,
                Getter = static obj => ((global::Northwind.MinimalAot.Service.Product)obj).ProductName,
                Setter = static (obj, value) => ((global::Northwind.MinimalAot.Service.Product)obj).ProductName = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "ProductName",
                JsonPropertyName = null
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<decimal?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Northwind.MinimalAot.Service.Product),
                Converter = null,
                Getter = static obj => ((global::Northwind.MinimalAot.Service.Product)obj).UnitPrice,
                Setter = static (obj, value) => ((global::Northwind.MinimalAot.Service.Product)obj).UnitPrice = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "UnitPrice",
                JsonPropertyName = null
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<decimal?>(options, info2);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void ProductSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::Northwind.MinimalAot.Service.Product? value)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            writer.WriteNumber(PropName_ProductId, ((global::Northwind.MinimalAot.Service.Product)value).ProductId);
            writer.WriteString(PropName_ProductName, ((global::Northwind.MinimalAot.Service.Product)value).ProductName);
            writer.WritePropertyName(PropName_UnitPrice);
            global::System.Text.Json.JsonSerializer.Serialize(writer, ((global::Northwind.MinimalAot.Service.Product)value).UnitPrice, NullableDecimal);

            writer.WriteEndObject();
        }
    }
}
